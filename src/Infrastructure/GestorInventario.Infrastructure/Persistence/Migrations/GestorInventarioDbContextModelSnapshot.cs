// <auto-generated />
using System;
using GestorInventario.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestorInventario.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(GestorInventarioDbContext))]
    partial class GestorInventarioDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("GestorInventario.Domain.Entities.AbcPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ServiceLevelA")
                        .HasPrecision(5, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ServiceLevelB")
                        .HasPrecision(5, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ServiceLevelC")
                        .HasPrecision(5, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ThresholdA")
                        .HasPrecision(5, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ThresholdB")
                        .HasPrecision(5, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AbcPolicies", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Changes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Locale")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Code")
                        .IsUnique();

                    b.ToTable("Branches", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrackingUrl")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Carriers", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "ParentId", "Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.DemandAggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AverageLeadTimeDays")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("PeriodStart")
                        .HasColumnType("date");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TotalRevenue")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.HasIndex("TenantId", "VariantId", "PeriodStart", "Interval")
                        .IsUnique();

                    b.ToTable("DemandAggregates", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.DemandHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ForecastQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.HasIndex("TenantId", "VariantId", "Date");

                    b.ToTable("DemandHistory", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.InventoryStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinStockLevel")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReservedQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("TenantId", "VariantId", "WarehouseId")
                        .IsUnique();

                    b.ToTable("InventoryStock", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.InventoryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceType");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("UserId");

                    b.HasIndex("VariantId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("TenantId", "VariantId", "WarehouseId");

                    b.ToTable("InventoryTransactions", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique();

                    b.ToTable("PriceLists", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DefaultPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("HeightCm")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LeadTimeDays")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LengthCm")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReorderPoint")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReorderQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresSerialTracking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("SafetyStock")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TaxRateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WeightKg")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("WidthCm")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("TenantId", "Code")
                        .IsUnique();

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductAttributeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowCustomValues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Slug")
                        .IsUnique();

                    b.ToTable("ProductAttributeGroups", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HexColor")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("GroupId", "Name")
                        .IsUnique();

                    b.ToTable("ProductAttributeValues", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AltText")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId", "ProductId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("VariantId");

                    b.HasIndex("TenantId", "PriceListId", "VariantId")
                        .IsUnique();

                    b.ToTable("ProductPrices", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Attributes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId", "Sku")
                        .IsUnique();

                    b.ToTable("Variants", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderDate");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TenantId");

                    b.ToTable("PurchaseOrders", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.PurchaseOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TaxRateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalLine")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("VariantId");

                    b.HasIndex("TenantId", "PurchaseOrderId");

                    b.ToTable("PurchaseOrderLines", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CarrierId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ShippingRateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate");

                    b.HasIndex("ShippingRateId");

                    b.HasIndex("TenantId");

                    b.ToTable("SalesOrders", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SalesOrderAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FulfilledQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesOrderLineId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShippedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SalesOrderLineId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SalesOrderAllocations", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SalesOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaxRateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalLine")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("VariantId");

                    b.HasIndex("TenantId", "SalesOrderId");

                    b.ToTable("SalesOrderLines", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SeasonalFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("EffectiveFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EffectiveTo")
                        .HasColumnType("date");

                    b.Property<decimal>("Factor")
                        .HasPrecision(18, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.HasIndex("TenantId", "VariantId", "Interval", "Sequence", "EffectiveFrom");

                    b.ToTable("SeasonalFactors", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CarrierId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShippedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TotalWeight")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("TenantId", "SalesOrderId");

                    b.ToTable("Shipments", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ShipmentEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("TenantId", "ShipmentId", "EventDate");

                    b.ToTable("ShipmentEvents", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ShipmentLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalesOrderAllocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SalesOrderLineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SalesOrderAllocationId");

                    b.HasIndex("SalesOrderLineId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("TenantId", "ShipmentId");

                    b.ToTable("ShipmentLines", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ShippingRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BaseCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CostPerDistance")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CostPerWeight")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShippingRates", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.TaxRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Region")
                        .IsUnique();

                    b.ToTable("TaxRates", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultCulture")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultCurrency")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMfaEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordResetTokenExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordResetTokenHash")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PendingTwoFactorTokenExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PendingTwoFactorTokenHash")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TotpRecoveryCodes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("TotpSecret")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.VariantAbcClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbcPolicyId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AnnualConsumptionValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EffectiveFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EffectiveTo")
                        .HasColumnType("date");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AbcPolicyId");

                    b.HasIndex("VariantId");

                    b.HasIndex("TenantId", "VariantId", "EffectiveFrom")
                        .HasDatabaseName("IX_VariantAbcClassifications_Variant_EffectiveFrom");

                    b.ToTable("VariantAbcClassifications", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Warehouses", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.WarehouseProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinimumQuantity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TargetQuantity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("TenantId", "WarehouseId", "VariantId")
                        .IsUnique();

                    b.ToTable("WarehouseProductVariants", (string)null);
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Branch", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Branches")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Carrier", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Category", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Customer", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.DemandAggregate", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("DemandAggregates")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.DemandHistory", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("DemandHistory")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.InventoryStock", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("InventoryStocks")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("InventoryStocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Variant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.InventoryTransaction", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.User", "User")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");

                    b.Navigation("Variant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.PriceList", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Product", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestorInventario.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("Products")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TaxRate");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductAttributeGroup", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.ProductAttributeGroup", "Group")
                        .WithMany("Values")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductPrice", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.PriceList", "PriceList")
                        .WithMany("ProductPrices")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("ProductPrices")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("Tenant");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.PurchaseOrderLine", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Lines")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("TaxRate");

                    b.Navigation("Tenant");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SalesOrder", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Carrier", "Carrier")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GestorInventario.Domain.Entities.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ShippingRate", "ShippingRate")
                        .WithMany("SalesOrders")
                        .HasForeignKey("ShippingRateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrier");

                    b.Navigation("Customer");

                    b.Navigation("ShippingRate");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SalesOrderAllocation", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.SalesOrderLine", "SalesOrderLine")
                        .WithMany("Allocations")
                        .HasForeignKey("SalesOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("SalesOrderAllocations")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesOrderLine");

                    b.Navigation("Tenant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SalesOrderLine", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.SalesOrder", "SalesOrder")
                        .WithMany("Lines")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("SalesOrderLines")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("SalesOrderLines")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesOrder");

                    b.Navigation("TaxRate");

                    b.Navigation("Tenant");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SeasonalFactor", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("SeasonalFactors")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Carrier", "Carrier")
                        .WithMany("Shipments")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GestorInventario.Domain.Entities.SalesOrder", "SalesOrder")
                        .WithMany("Shipments")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("Shipments")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Carrier");

                    b.Navigation("SalesOrder");

                    b.Navigation("Tenant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ShipmentEvent", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Shipment", "Shipment")
                        .WithMany("Events")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ShipmentLine", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.SalesOrderAllocation", "SalesOrderAllocation")
                        .WithMany("ShipmentLines")
                        .HasForeignKey("SalesOrderAllocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GestorInventario.Domain.Entities.SalesOrderLine", "SalesOrderLine")
                        .WithMany("ShipmentLines")
                        .HasForeignKey("SalesOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Shipment", "Shipment")
                        .WithMany("Lines")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesOrderAllocation");

                    b.Navigation("SalesOrderLine");

                    b.Navigation("Shipment");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Supplier", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.User", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.VariantAbcClassification", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.AbcPolicy", "Policy")
                        .WithMany("Classifications")
                        .HasForeignKey("AbcPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("AbcClassifications")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("Tenant");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.WarehouseProductVariant", b =>
                {
                    b.HasOne("GestorInventario.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("WarehouseProductVariants")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorInventario.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseProductVariants")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Variant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.AbcPolicy", b =>
                {
                    b.Navigation("Classifications");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Carrier", b =>
                {
                    b.Navigation("SalesOrders");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Customer", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.PriceList", b =>
                {
                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductAttributeGroup", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("AbcClassifications");

                    b.Navigation("DemandAggregates");

                    b.Navigation("DemandHistory");

                    b.Navigation("InventoryStocks");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("ProductPrices");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("SalesOrderLines");

                    b.Navigation("SeasonalFactors");

                    b.Navigation("WarehouseProductVariants");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SalesOrder", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SalesOrderAllocation", b =>
                {
                    b.Navigation("ShipmentLines");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.SalesOrderLine", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("ShipmentLines");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Shipment", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Lines");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.ShippingRate", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.TaxRate", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("SalesOrderLines");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("InventoryTransactions");
                });

            modelBuilder.Entity("GestorInventario.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("InventoryStocks");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("SalesOrderAllocations");

                    b.Navigation("Shipments");

                    b.Navigation("WarehouseProductVariants");
                });
#pragma warning restore 612, 618
        }
    }
}
